{"version":3,"sources":["com/fulcrologic/fulcro/inspect/inspect_client.cljc"],"mappings":"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","names":["js/goog.define","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.inspect","js/com.fulcrologic.fulcro.inspect.inspect-client","js/com.fulcrologic.fulcro.inspect.inspect-client.started?*","com.fulcrologic.fulcro.inspect.inspect-client/started?*","cljs.core.atom","js/com.fulcrologic.fulcro.inspect.inspect-client.tools-app*","com.fulcrologic.fulcro.inspect.inspect-client/tools-app*","js/com.fulcrologic.fulcro.inspect.inspect-client.apps*","com.fulcrologic.fulcro.inspect.inspect-client/apps*","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid-key","js/com.fulcrologic.fulcro.inspect.inspect-client.send-ch","com.fulcrologic.fulcro.inspect.inspect-client/send-ch","cljs.core.async.chan","cljs.core.async/dropping-buffer","com.fulcrologic.fulcro.inspect.inspect-client/post-message","type","data","cljs.core.async.put_BANG_","com.fulcrologic.fulcro.inspect.inspect-client/cljs?","env","cljs.core/boolean","var_args","G__56312","com.fulcrologic.fulcro.inspect.inspect-client/isoget","js/Error","obj","k","com.fulcrologic.fulcro.inspect.inspect_client.isoget","default","or__4120__auto__","goog.object/get","G__56314","cljs.core/name","com.fulcrologic.fulcro.inspect.inspect-client/app-state","app","G__56315","cljs.core/deref","com.fulcrologic.fulcro.inspect.inspect-client/runtime-atom","G__56319","com.fulcrologic.fulcro.inspect.inspect-client/state-atom","G__56322","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid","G__56326","cljs.core.get","com.fulcrologic.fulcro.inspect.inspect-client/remotes","G__56327","com.fulcrologic.fulcro.inspect.inspect-client/app-id","G__56331","com.fulcrologic.fulcro.inspect.inspect-client/fulcro-app-id","com.fulcrologic.fulcro.inspect.inspect-client/get-component-name","component","G__56333","com.fulcrologic.fulcro.inspect.inspect-client/comp-transact!","tx","options","tx!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.inspect.inspect-client/MAX_HISTORY_SIZE","com.fulcrologic.fulcro.inspect.inspect-client/fixed-size-assoc","size","db","key","value","map__56341","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","history","db'","cljs.core.assoc","cljs.core.update","cljs.core.fnil","cljs.core/conj","cljs.core/count","cljs.core.dissoc","cljs.core/first","p1__56339#","cljs.core/vec","cljs.core/next","com.fulcrologic.fulcro.inspect.inspect-client/update-state-history","state","p1__56347#","cljs.core.swap_BANG_","cljs.core/update","cljs.core/hash","com.fulcrologic.fulcro.inspect.inspect-client/db-from-history","state-hash","G__56350","com.fulcrologic.fulcro.inspect.inspect-client/db-changed!","old-state","new-state","app-uuid","diff","com.fulcrologic.fulcro.inspect.diff/diff","com.fulcrologic.fulcro.inspect.inspect-client/event-data","event","G__56355","goog.object/getValueByKeys","com.fulcrologic.fulcro.inspect.transit/read","com.fulcrologic.fulcro.inspect.inspect-client/start-send-message-loop","c__52287__auto__","cljs.core.async.impl.dispatch/run","f__52288__auto__","switch__51238__auto__","state_56388","state_val_56389","statearr-56395","cljs.core.async.impl.ioc-helpers/take!","inst_56383","cljs.core.async.impl.ioc-helpers/return-chan","inst_56360","statearr-56398","statearr-56399","statearr-56400","inst_56365","cljs.core.nth","inst_56366","inst_56367","inst_56368","inst_56369","js/Date","inst_56370","inst_56371","cljs.core/PersistentHashMap","inst_56372","inst_56373","inst_56374","inst_56375","inst_56376","statearr-56405","statearr-56406","statearr-56407","inst_56381","statearr-56411","statearr-56413","state-machine__51239__auto__","ret-value__51240__auto__","result__51241__auto__","cljs.core/keyword-identical?","ex__51242__auto__","e56414","statearr-56415","cljs.core/seq","statearr-56416","state__52289__auto__","statearr-56420","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/window","cljs.core/clj->js","com.fulcrologic.fulcro.inspect.transit/write","com.fulcrologic.fulcro.inspect.inspect-client/listen-local-messages","G__56422","com.fulcrologic.fulcro.inspect.inspect-client/handle-devtool-message","G__56428","com.fulcrologic.fulcro.inspect.inspect-client/transact-inspector!","ref","com.fulcrologic.fulcro.inspect.inspect-client/dispose-app","cljs.core/dissoc","com.fulcrologic.fulcro.inspect.inspect-client/set-active-app","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","remote","tx-id","txn","start","cljs.core.sequence","cljs.core.concat","cljs.core/List","com.fulcrologic.fulcro.inspect.inspect_client.transact_inspector_BANG_","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","response","finished","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","error","p__56452","map__56454","G__56460","cljs.core/Keyword","seq__56461","chunk__56462","count__56463","i__56464","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/vals","remote-names","cljs.core.sort_by","p1__56448#","cljs.core.juxt","cljs.core.not_EQ_","cljs.core/str","map__56470","target-state","temp__5733__auto__","render!","cljs.core/reset!","G__56476","G__56477","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","map__56489","tx-ref","b2__47199__auto__","map__56491","G__56495","historical-state","historical-app","G__56504","G__56505","map__56515","G__56517","G__56520","G__56521","map__56523","query","remote-name","msg-id","transmit!","ast","edn-query-language.core/query->ast","cljs.core/random-uuid","G__56529","G__56530","cljs.core/identity","p__56533","map__56534","body","result","error?","map__56536","log","log-js","warn","js/console.log","js/console.warn","js/console.error","com.fulcrologic.fulcro.inspect.inspect-client/install","_","js/document.documentElement.setAttribute","com.fulcrologic.fulcro.inspect.inspect-client/app-started!","networking","state*","cljs.core/assoc","p1__56546#","cljs.core/keys","p1__56549#","p2__56550#","p3__56547#","p4__56548#","cljs.core/add-watch","p__56555","p__56556","map__56557","map__56558","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","state-before","component-name","G__56562"],"sourcesContent":["(ns com.fulcrologic.fulcro.inspect.inspect-client\n  \"Functions used by Fulcro to talk to Fulcro Inspect.\"\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.inspect.inspect-client))\n  (:require\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    #?@(:cljs [[goog.object :as gobj]\n               [com.fulcrologic.fulcro.inspect.diff :as diff]\n               [com.fulcrologic.fulcro.inspect.transit :as encode]\n               [cljs.core.async :as async]])\n    [taoensso.encore :as encore]\n    [taoensso.timbre :as log]))\n\n#?(:cljs (goog-define INSPECT false))\n\n(declare handle-devtool-message)\n(defonce started?* (atom false))\n(defonce tools-app* (atom nil))\n(defonce apps* (atom {}))\n(def app-uuid-key :fulcro.inspect.core/app-uuid)\n\n(defonce send-ch #?(:clj nil :cljs (async/chan (async/dropping-buffer 50000))))\n(defn post-message [type data]\n  #?(:cljs (async/put! send-ch [type data])))\n\n(defn cljs?\n  \"Returns true when env is a cljs macro &env\"\n  [env]\n  (boolean (:ns env)))\n\n(defn- isoget\n  \"Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  ([obj k] (isoget obj k nil))\n  ([obj k default]\n   #?(:clj  (get obj k default)\n      :cljs (or (gobj/get obj (some-> k (name))) default))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers so we don't have to include other nses\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn app-state [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref))\n(defn runtime-atom [app] (some-> app :com.fulcrologic.fulcro.application/runtime-atom))\n(defn state-atom [app] (some-> app :com.fulcrologic.fulcro.application/state-atom))\n(defn app-uuid [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref (get app-uuid-key)))\n(defn remotes [app] (some-> (runtime-atom app) deref :com.fulcrologic.fulcro.application/remotes))\n(defn app-id [app] (some-> (app-state app) :fulcro.inspect.core/app-id))\n(defn fulcro-app-id [app] (:com.fulcrologic.fulcro.application/id app))\n(defn get-component-name [component] (when component (some-> (isoget component :fulcro$options) :displayName)))\n(defn comp-transact! [app tx options]\n  (let [tx! (ah/app-algorithm app :tx!)]\n    (tx! app tx options)))\n\n\n(def MAX_HISTORY_SIZE 100)\n\n(defn- fixed-size-assoc [size db key value]\n  (let [{:fulcro.inspect.client/keys [history] :as db'}\n        (-> db\n          (assoc key value)\n          (update :fulcro.inspect.client/history (fnil conj []) key))]\n    (if (> (count history) size)\n      (-> db'\n        (dissoc (first history))\n        (update :fulcro.inspect.client/history #(vec (next %))))\n      db')))\n\n(defn- update-state-history\n  \"Record a snapshot of history on the app itself for inspect to reference via events to do things like preview\n   history.\"\n  [app state]\n  (swap! (runtime-atom app) update :fulcro.inspect.client/state-history\n    #(fixed-size-assoc MAX_HISTORY_SIZE % (hash state) state)))\n\n(defn db-from-history [app state-hash]\n  (some-> (runtime-atom app) deref :fulcro.inspect.client/state-history (get state-hash)))\n\n(defn db-changed!\n  \"Notify Inspect that the database changed\"\n  [app old-state new-state]\n  #?(:cljs\n     (let [app-uuid (app-uuid app)]\n       (update-state-history app new-state)\n       (let [diff (diff/diff old-state new-state)]\n         (post-message :fulcro.inspect.client/db-update {app-uuid-key                           app-uuid\n                                                         :fulcro.inspect.client/prev-state-hash (hash old-state)\n                                                         :fulcro.inspect.client/state-hash      (hash new-state)\n                                                         :fulcro.inspect.client/state-delta     diff})))))\n\n(defn event-data [event]\n  #?(:cljs (some-> event (gobj/getValueByKeys \"data\" \"fulcro-inspect-devtool-message\") encode/read)))\n\n(defn start-send-message-loop []\n  #?(:cljs\n     (async/go-loop []\n       (when-let [[type data] (async/<! send-ch)]\n         (.postMessage js/window (clj->js {:fulcro-inspect-remote-message (encode/write {:type type :data data :timestamp (js/Date.)})}) \"*\")\n         (recur)))))\n\n(defn listen-local-messages []\n  #?(:cljs\n     (.addEventListener js/window \"message\"\n       (fn [event]\n         (cond\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-devtool-message\"))\n           (handle-devtool-message (event-data event))\n\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-start-consume\"))\n           (start-send-message-loop)))\n       false)))\n\n\n\n(defn transact-inspector!\n  ([tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx tx}))\n  ([ref tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx-ref ref :fulcro.inspect.client/tx tx})))\n\n(defn dispose-app [app-uuid]\n  (swap! apps* dissoc app-uuid)\n  (post-message :fulcro.inspect.client/dispose-app {app-uuid-key app-uuid}))\n\n(defn set-active-app [app-uuid]\n  (post-message :fulcro.inspect.client/set-active-app {app-uuid-key app-uuid}))\n\n#_(defn inspect-app [app]\n    #?(:cljs\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (random-uuid)]\n\n         (swap! apps* assoc app-uuid app)\n         #_(update-state-history app @state*)\n\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*\n                                                        :fulcro.inspect.client/state-hash    (hash @state*)})\n\n         (add-watch state* app-uuid #(db-update app app-uuid %3 %4))\n\n         (swap! state* assoc app-uuid-key app-uuid)\n\n         app)))\n\n(defn send-started! [app remote tx-id txn]\n  #?(:cljs\n     (let [start    (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-start ~{:fulcro.inspect.ui.network/remote             remote\n                                                      :fulcro.inspect.ui.network/request-id         tx-id\n                                                      :fulcro.inspect.ui.network/request-started-at start\n                                                      :fulcro.inspect.ui.network/request-edn        txn})]))))\n\n(defn send-finished! [app remote tx-id response]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/response-edn        response})]))))\n\n(defn send-failed! [app tx-id error]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/error               error})]))))\n(defn handle-devtool-message [{:keys [type data]}]\n  #?(:cljs\n     (case type\n       :fulcro.inspect.client/request-page-apps\n       (do\n         (doseq [app (vals @apps*)]\n           (let [state        (app-state app)\n                 remote-names (remotes app)]\n             (post-message :fulcro.inspect.client/init-app {app-uuid-key                         (app-uuid app)\n                                                            :fulcro.inspect.core/app-id          (app-id app)\n                                                            :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) remote-names)\n                                                            :fulcro.inspect.client/initial-state state\n                                                            :fulcro.inspect.client/state-hash    (hash state)}))))\n\n       :fulcro.inspect.client/reset-app-state\n       (let [{:keys                     [target-state]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (let [render! (ah/app-algorithm app :schedule-render!)]\n             (if target-state\n               (let [target-state (assoc target-state app-uuid-key app-uuid)]\n                 (reset! (state-atom app) target-state)))\n             (render! app {:force-root? true}))\n           (log/info \"Reset app on invalid uuid\" app-uuid)))\n\n       :fulcro.inspect.client/transact\n       (let [{:keys                     [tx tx-ref]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (if tx-ref\n             (comp-transact! app tx {:ref tx-ref})\n             (comp-transact! app tx {}))\n           (log/error \"Transact on invalid uuid\" app-uuid)))\n\n       :fulcro.inspect.client/pick-element\n       (log/error \"Pick Element Not implemented for Inspect v3\")\n\n       :fulcro.inspect.client/show-dom-preview\n       (encore/if-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                       app              (some-> @apps* (get app-uuid))\n                       historical-state (db-from-history app (:fulcro.inspect.client/state-hash data))\n                       historical-app   (assoc app :com.fulcrologic.fulcro.application/state-atom (atom historical-state))\n                       render!          (ah/app-algorithm app :render!)]\n         (do\n           (render! historical-app {:force-root? true}))\n         (log/error \"Unable to find app/state for preview.\"))\n\n       :fulcro.inspect.client/hide-dom-preview\n       (encore/when-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                         app     (some-> @apps* (get app-uuid))\n                         render! (ah/app-algorithm app :render!)]\n         (render! app {:force-root? true}))\n\n       :fulcro.inspect.client/network-request\n       (let [{:keys                          [query]\n              remote-name                    :fulcro.inspect.client/remote\n              :fulcro.inspect.ui-parser/keys [msg-id]\n              :fulcro.inspect.core/keys      [app-uuid]} data]\n         (encore/when-let [app       (get @apps* app-uuid)\n                           remote    (get (remotes app) remote-name)\n                           transmit! (-> remote :transmit!)\n                           ast       (eql/query->ast query)\n                           tx-id     (random-uuid)]\n           (send-started! app remote-name tx-id query)\n           (transmit! remote {:com.fulcrologic.fulcro.algorithms.tx-processing/id             tx-id\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/ast            ast\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/idx            0\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/options        {}\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/update-handler identity\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/result-handler (fn [{:keys [body] :as result}]\n                                                                                                (let [error? (ah/app-algorithm app :remote-error?)]\n                                                                                                  (if (error? result)\n                                                                                                    (send-failed! app remote-name result)\n                                                                                                    (send-finished! app remote-name tx-id body)))\n                                                                                                (post-message :fulcro.inspect.client/message-response\n                                                                                                  {:fulcro.inspect.ui-parser/msg-id       msg-id\n                                                                                                   :fulcro.inspect.ui-parser/msg-response body}))})))\n\n       :fulcro.inspect.client/console-log\n       (let [{:keys [log log-js warn error]} data]\n         (cond\n           log\n           (js/console.log log)\n\n           log-js\n           (js/console.log (clj->js log-js))\n\n           warn\n           (js/console.warn warn)\n\n           error\n           (js/console.error error)))\n\n       :fulcro.inspect.client/check-client-version\n       (post-message :fulcro.inspect.client/client-version {:version \"2.2.5\"})\n\n       (log/debug \"Unknown message\" type))))\n\n\n(defn install [_]\n  #?(:cljs\n     (do\n       (js/document.documentElement.setAttribute \"__fulcro-inspect-remote-installed__\" true)\n\n       (when-not @started?*\n         (log/info \"Installing Fulcro 3.x Inspect\" {})\n\n         (reset! started?* true)\n\n         (listen-local-messages)))))\n\n(defn app-started!\n  \"Register the application with Inspect, if it is available.\"\n  [app]\n  #?(:cljs\n     (let [networking (remotes app)\n           state*     (state-atom app)\n           app-uuid   (fulcro-app-id app)]\n       (swap! apps* assoc app-uuid app)\n       (update-state-history app @state*)\n       (swap! state* assoc app-uuid-key app-uuid)\n       (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                      :fulcro.inspect.core/app-id          (app-id app)\n                                                      :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                      :fulcro.inspect.client/initial-state @state*\n                                                      :fulcro.inspect.client/state-hash    (hash @state*)})\n       (add-watch state* app-uuid #(db-changed! app %3 %4)))))\n\n(defn optimistic-action-finished!\n  \"Notify inspect that a transaction finished.\n\n   app - The app\n   env - The mutation env that completed.\"\n  [app\n   {:keys [component ref state com.fulcrologic.fulcro.algorithms.tx-processing/options]}\n   {:keys [tx-id tx state-before]}]\n  #?(:cljs\n     (let [component-name (get-component-name component)\n           tx             (cond-> {:fulcro.inspect.ui.transactions/tx-id                    tx-id\n                                   :fulcro.history/client-time                              (js/Date.)\n                                   :fulcro.history/tx                                       tx\n                                   :fulcro.history/db-before-hash                           (hash state-before)\n                                   :fulcro.history/db-after-hash                            (hash @state)\n                                   :fulcro.history/network-sends                            []\n                                   :com.fulcrologic.fulcro.algorithms.tx-processing/options options}\n                            component-name (assoc :component component-name)\n                            ref (assoc :ident-ref ref))\n           app-uuid       (app-uuid app)]\n       (post-message :fulcro.inspect.client/new-client-transaction {app-uuid-key              app-uuid\n                                                                    :fulcro.inspect.client/tx tx}))))\n\n(defmacro ido\n  \"Wrap a block of code that will only run if Inspect is enabled.  Code in these blocks will also be removed via\n  DCE in Closure.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [& body]\n  (when (cljs? &env)\n    `(when (or ~'goog.DEBUG INSPECT)\n       (try\n         ~@body\n         (catch :default ~'e)))))\n\n(defmacro ilet\n  \"Like `clojure.core/let`, but elides the block if Inspect isn't enabled.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [bindings & body]\n  (when (cljs? &env)\n    `(ido\n       (let ~bindings\n         ~@body))))\n"]}