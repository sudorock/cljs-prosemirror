{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/transit.cljc"],"mappings":";;;;AAcG,AAAA;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAASI,AAECE;;AAFV,AAAA,AAAA,AAEQA;AAFR,AAEaC;;;AAFb,AAAA,AAAA,AAAA,AAASH,AAGCI;;AAHV,AAAA,AAAA,AAGQF;AAHR,AAGa,AAAGE;;;AAHhB,AAAA,AAAA,AAAA,AAASJ,AAIOE;;AAJhB,AAAA,AAAA,AAIcA;AAJd,AAAA;;;AAAA,AAAA,AAAA,AAASF;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI;AAAT,AAAA,AAAAD;;;AAASA,AAeT,AAAA;;;;;;AAAA,AAAAK,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAMG,AAAA,AAACE;;;AANJ,AAAA,AAAA,AAAMF,AAOFG;AAPJ,AAQG,AAAA,AAACC,AACC,AAAA,AAAA,AAACC,AAASF,AAAgBG,AAAQ,AAAAb;;;AATvC,AAAA,AAAA,AAAMO;;AAAN,AAwBA,AAAA;;;;;AAAA,AAAAF,AAAMU;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMO;AAAN,AAKG,AAAA,AAACC;;;AALJ,AAAA,AAAA,AAAMD,AAMFL;AANJ,AAOG,AAAA,AAACO,AACC,AAAA,AAAA,AAACL,AAASF,AACGP,AACX,AAAKe;AAAL,AAAS,AAACC,AAAcD;;;;AAV/B,AAAA,AAAA,AAAMH;;AAAN,AA2BH;;;;AAAA,AAAMK,AAGHC;AAHH,AAQW,AAAA,AACE,AAAQ,AAACZ,AAAQY;;AADnB;AAAA,AAAAC,AAGkBC;AAHlB,AAAA;;AAKX,AAAA;;;;;;;;;AAAA,AAAAlB,AAAMoB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAjB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMiB,AAQFC;AARJ,AAQU,AAAA,AAACC,AAAiBD;;;AAR5B,AAAA,AAAA,AAAMD,AASFC,AAAKhB;AATT,AAUG,AAAMA,AAAK,AAAA,AAACkB,AAAMlB,AAAgBmB;AAAlC,AACW,AAACC,AAAQ,AAACrB,AAAOC,AAAMgB;;;AAXrC,AAAA,AAAA,AAAMD;;AAAN,AAiBA,AAAA;;;;AAAA,AAAApB,AAAM2B;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMwB,AAGFC;AAHJ,AAGS,AAAA,AAACC,AAAiBD;;;AAH3B,AAAA,AAAA,AAAMD,AAIFC,AAAIvB;AAJR,AAKY,AAACyB,AAAO,AAACnB,AAAON,AAAMuB;;;AALlC,AAAA,AAAA,AAAMD;;AAAN","names":["this__4363__auto__","writer__4364__auto__","opt__4365__auto__","cljs.core/-write","com.fulcrologic.fulcro.algorithms.transit/TempIdHandler","com.fulcrologic.fulcro.algorithms.transit/->TempIdHandler","_","com.fulcrologic.fulcro.algorithms.tempid/tag","r","var_args","G__52463","com.fulcrologic.fulcro.algorithms.transit/writer","js/Error","com.fulcrologic.fulcro.algorithms.transit.writer","opts","cognitect.transit.writer","cljs.core/assoc-in","com.fulcrologic.fulcro.algorithms.tempid/TempId","G__52475","com.fulcrologic.fulcro.algorithms.transit/reader","com.fulcrologic.fulcro.algorithms.transit.reader","cognitect.transit.reader","id","com.fulcrologic.fulcro.algorithms.tempid.tempid","com.fulcrologic.fulcro.algorithms.transit/serializable?","v","e52478","e","G__52481","com.fulcrologic.fulcro.algorithms.transit/transit-clj->str","data","com.fulcrologic.fulcro.algorithms.transit.transit_clj__GT_str","cljs.core.assoc","cognitect.transit/write-meta","cognitect.transit/write","G__52486","com.fulcrologic.fulcro.algorithms.transit/transit-str->clj","str","com.fulcrologic.fulcro.algorithms.transit.transit_str__GT_clj","cognitect.transit/read"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.transit\n  \"Transit functions for the on-the-wire EDN communication to common remotes. Includes support for Fulcro tempids,\n   and can be extended to support additional application-specific data types.\"\n  #?(:clj\n     (:refer-clojure :exclude [ref]))\n  (:require\n    [cognitect.transit :as t]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid #?@(:cljs [:refer [TempId]])])\n  #?(:clj\n     (:import [com.cognitect.transit\n               TransitFactory WriteHandler ReadHandler]\n              [com.fulcrologic.fulcro.algorithms.tempid TempId])))\n\n#?(:cljs\n   (deftype TempIdHandler []\n     Object\n     (tag [_ _] tempid/tag)\n     (rep [_ r] (. r -id))\n     (stringRep [_ _] nil)))\n\n#?(:clj\n   (deftype TempIdHandler []\n     WriteHandler\n     (tag [_ _] tempid/tag)\n     (rep [_ r] (.-id ^TempId r))\n     (stringRep [_ r] (str tempid/tag \"#\" r))\n     (getVerboseHandler [_] nil)))\n\n#?(:cljs\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as handlers).\"\n     ([]\n      (writer {}))\n     ([opts]\n      (t/writer :json\n        (assoc-in opts [:handlers TempId] (TempIdHandler.))))))\n\n#?(:clj\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as data type handlers).\"\n     ([out]\n      (writer out {}))\n     ([out opts]\n      (t/writer out :json\n        (assoc-in opts [:handlers TempId] (TempIdHandler.))))))\n\n#?(:cljs\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([]\n      (reader {}))\n     ([opts]\n      (t/reader :json\n        (assoc-in opts\n          [:handlers tempid/tag]\n          (fn [id] (tempid/tempid id)))))))\n\n#?(:clj\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([in]\n      (reader in {}))\n     ([in opts]\n      (t/reader in :json\n        (assoc-in opts\n          [:handlers tempid/tag]\n          (reify\n            ReadHandler\n            (fromRep [_ id] (TempId. id))))))))\n\n(defn serializable?\n  \"Checks to see that the value in question can be serialized by the default fulcro writer by actually attempting to\n  serialize it.  This is *not* an efficient check.\"\n  [v]\n  #?(:clj  (try\n             (.write (writer (java.io.ByteArrayOutputStream.)) v)\n             true\n             (catch Exception e false))\n     :cljs (try\n             (.write (writer) v)\n             true\n             (catch :default e false))))\n\n(defn transit-clj->str\n  \"Use transit to encode clj data as a string. Useful for encoding initial app state from server-side rendering.\n\n  - `data`: Arbitrary data\n  - `opts`: (optional) Options to send when creating a `writer`. Always preserves metadata.\n\n  WARNING: metadata encoding will not work in CLJS if you don't use the latest transit-js. If using\n  shadow-cljs, this means placing that in your package.json file (not relying on the jar version).\"\n  ([data] (transit-clj->str data {}))\n  ([data opts]\n   (let [opts (assoc opts :transform t/write-meta)]\n     #?(:cljs (t/write (writer opts) data)\n        :clj\n              (with-open [out (java.io.ByteArrayOutputStream.)]\n                (t/write (writer out opts) data)\n                (.toString out \"UTF-8\"))))))\n\n(defn transit-str->clj\n  \"Use transit to decode a string into a clj data structure. Useful for decoding initial app state\n   when starting from a server-side rendering.\"\n  ([str] (transit-str->clj str {}))\n  ([str opts]\n   #?(:cljs (t/read (reader opts) str)\n      :clj  (t/read (reader (java.io.ByteArrayInputStream. (.getBytes str \"UTF-8\")) opts)))))\n\n"]}