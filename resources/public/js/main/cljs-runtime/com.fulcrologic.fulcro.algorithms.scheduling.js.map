{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/scheduling.cljc"],"mappings":";;;;;AAOA;;;AAAA,AAAMA,AAEHC,AAAEC;AAFL,AAGW,AAACC,AAAcF,AAAEC;;AAY5B,AAAA;;;;;;;;AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAOFE,AAAIC,AAAcC,AAAOR;AAP7B,AAAA,AAAA,AAQ4CS,AAASC,AAAIC,AAAKC,AAAGC;;AAC9D,AAAAC,AAAgER;AAAhEQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAiDK;AAAjD,AACE,AAAU,AAAA,AAAAC,AAACF,AAAKC,AAAaZ;AAA7B;;AAAA,AACE,AAAA,AAACc,AAAMF,AAAaG,AAAMf;;AAC1B,AAACT,AAAM;AAAA,AACE,AAAA,AAACuB,AAAMF,AAAaG,AAAMf;;AAC1B,AAACC,AAAAA,AAAAA,AAAOF,AAAAA;AAAMN;;;;AAd9B,AAAA,AAAA,AAAMI,AAeFE,AAAIC,AAAcC;AAftB,AAAA,AAAA,AAgB4CC,AAASC,AAAIE,AAAGC;;AACzD,AAAA,AAACU,AAAUjB,AAAIC,AAAcC;;;AAjBhC,AAAA,AAAA,AAAMJ;;AAAN,AAmBA;;;;;;AAAA,AAAMoB,AAKFlB,AAAIC,AAAcC;AALtB,AAAA,AAAA,AAM4CC,AAASC,AAAIE,AAAGC;;AAEhD,AAAAY,AAAgEnB;AAAhEmB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AAAAP,AAAAO,AAAA,AAAiDN;AAAjD,AACE,AAAU,AAAA,AAAAC,AAACF,AAAKC,AAAaZ;AAA7B;;AAAA,AACE,AAAA,AAACc,AAAMF,AAAaG,AAAMf;;AAC1B,AAAMR,AAAE;AAAA,AACE,AAAA,AAACsB,AAAMF,AAAaG,AAAMf;;AAC1B,AAACC,AAAAA,AAAAA;;AAFX,AAGE,AAAA,AAAQ,AAAAkB;AACN,AAAA,AAAC5B,AAAMC;;AACP,AAAC2B,AAAyB3B","names":["com.fulcrologic.fulcro.algorithms.scheduling/defer","f","tm","js/setTimeout","var_args","G__56935","com.fulcrologic.fulcro.algorithms.scheduling/schedule!","js/Error","app","scheduled-key","action","cljs.core/keyword?","cljs.core/fn?","cljs.core/int?","com.fulcrologic.guardrails.core/=>","cljs.core/any?","map__56936","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","runtime-atom","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_","com.fulcrologic.fulcro.algorithms.scheduling/schedule-animation!","map__56941","js/requestAnimationFrame"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.scheduling\n  \"Algorithms for delaying some action by a particular amount of time.\"\n  (:require\n    [com.fulcrologic.guardrails.core :refer [>fdef =>]]\n    [clojure.core.async :as async]\n    [taoensso.timbre :as log]))\n\n(defn defer\n  \"Schedule f to run in `tm` ms.\"\n  [f tm]\n  #?(:cljs (js/setTimeout f tm)\n     :clj  (let [active (atom true)\n                 cancel (fn [] (reset! active false))]\n             (async/go\n               (async/<! (async/timeout tm))\n               (when (and @active f)\n                 (try\n                   (f)\n                   (catch Exception e\n                     (log/error e \"Deferred function crash\")))))\n             cancel)))\n\n(defn schedule!\n  \"Schedule the processing of a specific action in the runtime atom. This is a no-op if the item is already scheduled.\n  When the timeout arrives it runs the given action and sets the given flag back to false.\n\n  - `scheduled-key` - The runtime flag that tracks scheduling for the processing.\n  - `action` - The function to run when the scheduled time comes.\n  - `tm` - Number of ms to delay (default 0).\"\n  ([app scheduled-key action tm]\n   [:com.fulcrologic.fulcro.application/app keyword? fn? int? => any?]\n   (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app]\n     (when-not (get @runtime-atom scheduled-key)\n       (swap! runtime-atom assoc scheduled-key true)\n       (defer (fn []\n                (swap! runtime-atom assoc scheduled-key false)\n                (action app)) tm))))\n  ([app scheduled-key action]\n   [:com.fulcrologic.fulcro.application/app keyword? fn? => any?]\n   (schedule! app scheduled-key action 0)))\n\n(defn schedule-animation!\n  \"Schedule the processing of a specific action in the runtime atom on the next animation frame.\n\n  - `scheduled-key` - The runtime flag that tracks scheduling for the processing.\n  - `action` - The function to run when the scheduled time comes.\"\n  ([app scheduled-key action]\n   [:com.fulcrologic.fulcro.application/app keyword? fn? => any?]\n   #?(:clj  (action)\n      :cljs (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app]\n              (when-not (get @runtime-atom scheduled-key)\n                (swap! runtime-atom assoc scheduled-key true)\n                (let [f (fn []\n                          (swap! runtime-atom assoc scheduled-key false)\n                          (action))]\n                  (if-not (exists? js/requestAnimationFrame)\n                    (defer f 16)\n                    (js/requestAnimationFrame f))))))))\n"]}