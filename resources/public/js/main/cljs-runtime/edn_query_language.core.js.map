{"version":3,"sources":["edn_query_language/core.cljc"],"mappings":"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","names":["edn-query-language.core/*shallow-conversion*","js/goog.define","edn-query-language.core/INCLUDE_SPECS","edn-query-language.core/generators","_","clojure.test.check.generators/keyword-ns","clojure.test.check.generators/return","clojure.test.check.generators/frequency","clojure.test.check.generators/simple-type-printable","p__46502","map__46504","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","gen-ident-key","gen-ident-value","env","clojure.test.check.generators.tuple","clojure.test.check.generators.map","clojure.test.check.generators/any-printable","p__46551","map__46552","gen-property","gen-ident","gen-join-key-param-expr","p__46498","map__46499","clojure.test.check.generators/one-of","p__46559","map__46560","gen-join-key-param-key","gen-params","clojure.test.check.generators/bind","val__26070__auto__","clojure.test.check.generators/generator?","q","p","cljs.core/List","p__46536","map__46537","gen-join-key","gen-join-query","p__46547","map__46548","gen-query","gen-union","gen-recursion","p__46532","map__46533","gen-union-key","clojure.test.check.generators/large-integer*","p__46564","map__46566","gen-depth","p__46554","map__46555","gen-join","p__46540","map__46542","gen-param-expr-key","p__46511","map__46512","gen-param-expr","gen-special-property","gen-mutation","p__46492","map__46493","gen-query-expr","gen-max-depth","clojure.test.check.generators.vector","G__46495","cljs.core.update","cljs.core/dec","clojure.test.check.generators.vector_distinct","clojure.test.check.generators/symbol","p__46517","map__46518","gen-mutation-key","key","val","p__46487","map__46488","gen-mutation-expr","p__46507","map__46508","gen-mutation-join","edn-query-language.core/default-gen","name","fexpr__46570","edn-query-language.core/make-gen","cljs.core.merge","gen","js/Error","fexpr__46573","cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.spec.alpha/with-gen","cljs.core/any?","cljs.spec.alpha.tuple_impl","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha.every_impl","G__46581","cljs.core/map?","cljs.core._EQ_","cljs.core/bounded-count","i__13100__auto__","v__13101__auto__","cljs.core.nth","G__46583","or__4120__auto__","cljs.spec.alpha/MAX_INT","cljs.core/nat-int?","cljs.spec.alpha/and-spec-impl","cljs.core/seq?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/symbol?","G__46646","G__46672","cljs.core/vector?","G__46674","cljs.core/coll?","p1__46480#","cljs.spec.alpha/map-spec-impl","G__46733","cljs.core/contains?","x","cljs.core/every?","p1__46481#","cljs.core.comp","js/edn-query-language","js/edn-query-language.core","js/edn-query-language.core.node-type","method-table__4613__auto__","cljs.core.atom","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","fexpr__46749","cljs.core/MultiFn","cljs.core.symbol","edn-query-language.core/node-type","G__46750","G__46776","p1__46482#","G__46827","cljs.core/first","p1__46483#","p1__46484#","G__46885","G__46977","p1__46485#","G__47042","p1__46486#","cljs.spec.alpha.spec_impl","cljs.core/set","cljs.core/keys","cljs.core/methods","cljs.spec.alpha.multi_spec_impl","edn-query-language.core/mark-meta","source","target","G__47069","cljs.core/meta","cljs.core.assoc","edn-query-language.core/symbol->ast","k","edn-query-language.core/keyword->ast","p__47073","vec__47075","edn-query-language.core/union-entry->ast","v","component","cljs.core.into","cljs.core.map","edn-query-language.core/expr->ast","edn-query-language.core/union->ast","m","p__47083","vec__47084","edn-query-language.core/call->ast","f","args","call","ast","cljs.core.update_in","cljs.core/merge","G__47088","cljs.core/Symbol","edn-query-language.core/query->ast","query","edn-query-language.core/query->ast1","query-expr","edn-query-language.core/join->ast","join","vec__47098","query-root?","type","cljs.core.ex_info","p__47107","vec__47109","edn-query-language.core/ident->ast","id","ref","cljs.core/Keyword","edn-query-language.core/wrap-expr","root?","expr","cljs.core/with-meta","G__47118","edn-query-language.core/parameterize","params","cljs.core/empty?","var_args","G__47130","edn-query-language.core/ast->expr","p__47142","map__47143","edn_query_language.core.ast__GT_expr","ast-meta","unparse?","G__47146","p1__47125#","cljs.core.vary_meta","cljs.core/assoc","map__47149","query-root","and__4109__auto__","cljs.core.not_EQ_","cljs.core.dissoc","map__47160","children","query-meta","cljs.core/count","G__47167","p__47172","map__47173","union-key","G__47177","p1__47126#","G__47183","p1__47127#","edn-query-language.core/ast->query","query-ast","edn-query-language.core/ident?","edn-query-language.core/focus-subquery-union*","sub-ast","s-index","p1__47193#","cljs.core/PersistentVector","cljs.core.reduce","p__47198","map__47200","union-entry","temp__5733__auto__","sub","cljs.core.conj","edn-query-language.core/focus-subquery*","q-index","p1__47206#","p__47210","map__47211","focus","edn-query-language.core/focus-subquery","sub-query","p__47214","map__47216","edn-query-language.core/transduce-children","xform","node","G__47220","cljs.core/seq","p1__47213#","edn-query-language.core/union-children?","G__47229","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","edn-query-language.core/update-property-param","seq47230","G__47231","cljs.core/next","G__47232","self__4717__auto__","vec__47237","edn-query-language.core/merge-asts","qa","qb","p__47248","map__47249","item-b","vec__47251","idx","item","p1__47246#","p2__47245#","cljs.core.keep_indexed","cljs.core/reduced","cljs.core/assoc-in","cljs.core/conj","edn-query-language.core/merge-queries","G__47256","p__47257","map__47258","edn-query-language.core/mask-query*","source-ast","mask-ast","p__47260","map__47261","mask-children","mask-node","source-node","cljs.core.filter","edn-query-language.core/mask-query","mask","edn-query-language.core/normalize-query-variables","G__47267","p1__47265#","p__47270","vec__47273","edn-query-language.core/query-id","cljs.core/hash","edn-query-language.core/query->shallow-ast","*shallow-conversion*-orig-val__47277","*shallow-conversion*-temp-val__47278","cljs.spec.alpha/fspec-impl","cljs.spec.alpha/nilable-impl","cljs.core/boolean?","cljs.core/fn?","cljs.spec.alpha/rep-impl"],"sourcesContent":["(ns edn-query-language.core\n  (:refer-clojure :exclude [ident?])\n  (:require [clojure.spec.alpha :as s]\n            [clojure.test.check]\n            [clojure.test.check.generators :as gen #?@(:cljs [:include-macros true])]\n            [clojure.test.check.properties]))\n\n(def ^:dynamic *shallow-conversion*\n  \"Dynamic var.  When bound to true in the current thread calls to query->ast will no go past the\n  first level of children.  This is useful when you just want the AST for one layer of a query.\"\n  false)\n\n#?(:clj  (def INCLUDE_SPECS true)\n   :cljs (goog-define INCLUDE_SPECS true))\n\n(when INCLUDE_SPECS\n  ;; query specs\n\n  (def generators\n    {::gen-max-depth\n     4\n\n     ::gen-property\n     (fn gen-property [_] gen/keyword-ns)\n\n     ::gen-special-property\n     (fn gen-special-property [_] (gen/return '*))\n\n     ::gen-ident-key\n     (fn gen-ident-key [_] gen/keyword-ns)\n\n     ::gen-ident-value\n     (fn gen-ident-value [_]\n       (gen/frequency [[15 gen/simple-type-printable]\n                       [1 (gen/return '_)]]))\n\n     ::gen-ident\n     (fn gen-ident [{::keys [gen-ident-key gen-ident-value] :as env}]\n       (gen/tuple\n         (gen-ident-key env)\n         (gen-ident-value env)))\n\n     ::gen-params\n     (fn gen-params [_] (gen/map gen/any-printable gen/any-printable))\n\n     ::gen-join-key\n     (fn gen-join-key [{::keys [gen-property gen-ident gen-join-key-param-expr] :as env}]\n       (gen/frequency [[10 (gen-property env)]\n                       [3 (gen-ident env)]\n                       [1 (gen-join-key-param-expr env)]]))\n\n     ::gen-join-key-param-key\n     (fn gen-join-key-param-key [{::keys [gen-property gen-ident] :as env}]\n       (gen/one-of [(gen-property env) (gen-ident env)]))\n\n     ::gen-join-key-param-expr\n     (fn gen-join-key-param-expr [{::keys [gen-join-key-param-key gen-params] :as env}]\n       (gen/let [q (gen-join-key-param-key env)\n                 p (gen-params env)]\n         (list q p)))\n\n     ::gen-join\n     (fn gen-join [{::keys [gen-join-key gen-join-query] :as env}]\n       (gen/map (gen-join-key env) (gen-join-query env) {:num-elements 1}))\n\n     ::gen-join-query\n     (fn gen-join-query [{::keys [gen-query gen-union gen-recursion] :as env}]\n       (gen/frequency [[10 (gen-query env)]\n                       [2 (gen-union env)]\n                       [1 (gen-recursion env)]]))\n\n     ::gen-union-key\n     (fn gen-union-key [_] gen/keyword-ns)\n\n     ::gen-union\n     (fn gen-union [{::keys [gen-union-key gen-query] :as env}]\n       (gen/map (gen-union-key env) (gen-query env) {:min-elements 1}))\n\n     ::gen-depth\n     (fn gen-depth [_] (gen/large-integer* {:min 1 :max 5}))\n\n     ::gen-recursion\n     (fn gen-recursion [{::keys [gen-depth] :as env}]\n       (gen/one-of [(gen-depth env) (gen/return '...)]))\n\n     ::gen-param-expr-key\n     (fn gen-param-expr-key [{::keys [gen-property gen-join gen-ident] :as env}]\n       (gen/frequency [[20 (gen-property env)]\n                       [8 (gen-join env)]\n                       [4 (gen-ident env)]]))\n\n     ::gen-param-expr\n     (fn gen-param-expr [{::keys [gen-param-expr-key gen-params] :as env}]\n       (gen/let [q (gen-param-expr-key env)\n                 p (gen-params env)]\n         (list q p)))\n\n     ::gen-query-expr\n     (fn gen-query-expr [{::keys [gen-property gen-join gen-ident gen-param-expr gen-special-property gen-mutation]\n                          :as    env}]\n       (gen/frequency [[20 (gen-property env)]\n                       [6 (gen-join env)]\n                       [1 (gen-ident env)]\n                       [2 (gen-param-expr env)]\n                       [1 (gen-mutation env)]\n                       [1 (gen-special-property env)]]))\n\n     ::gen-query\n     (fn gen-query [{::keys [gen-property gen-query-expr gen-max-depth] :as env}]\n       (if (> gen-max-depth 0)\n         (gen/vector (gen-query-expr (update env ::gen-max-depth dec)))\n         (gen/vector-distinct (gen-property env))))\n\n     ::gen-mutation-key\n     (fn gen-mutation-key [_] gen/symbol)\n\n     ::gen-mutation-expr\n     (fn gen-mutation-expr [{::keys [gen-mutation-key gen-params] :as env}]\n       (gen/let [key (gen-mutation-key env)\n                 val (gen-params env)]\n         (list key val)))\n\n     ::gen-mutation-join\n     (fn mutation-join [{::keys [gen-mutation-expr gen-query] :as env}]\n       (gen/map (gen-mutation-expr env) (gen-query env) {:num-elements 1}))\n\n     ::gen-mutation\n     (fn gen-mutation [{::keys [gen-mutation-expr gen-mutation-join] :as env}]\n       (gen/frequency [[5 (gen-mutation-expr env)]\n                       [1 (gen-mutation-join env)]]))})\n\n  (defn default-gen [name]\n    #((get generators name) generators))\n\n  (defn make-gen\n    [env name]\n    (let [env (merge generators env)\n          gen (get env name)]\n      (assert gen (str \"No generator available for \" name))\n      ((get env name) env)))\n\n  ; tag::specs[]\n  (s/def ::property keyword?)\n  (s/def ::special-property #{'*})\n  (s/def ::ident-value (s/with-gen any? (default-gen ::gen-ident-value)))\n  (s/def ::ident (s/with-gen (s/tuple ::property ::ident-value) (default-gen ::gen-ident)))\n  (s/def ::join-key (s/or :prop ::property, :ident ::ident, :param-exp ::join-key-param-expr))\n  (s/def ::join (s/map-of ::join-key ::join-query, :count 1, :conform-keys true))\n  (s/def ::union (s/map-of ::property ::query, :min-count 1, :conform-keys true))\n  (s/def ::recursion-depth (s/with-gen nat-int? (default-gen ::gen-depth)))\n  (s/def ::recursion (s/or :depth ::recursion-depth, :unbounded #{'...}))\n\n  (s/def ::join-query\n    (s/with-gen\n      (s/or :query ::query\n            :union ::union\n            :recursion ::recursion)\n      (default-gen ::gen-join-query)))\n\n  (s/def ::params\n    (s/with-gen map? (default-gen ::gen-params)))\n\n  (s/def ::param-expr-key\n    (s/with-gen\n      (s/or :prop ::property\n            :join ::join\n            :ident ::ident)\n      (default-gen ::gen-param-expr-key)))\n\n  (s/def ::param-expr\n    (s/with-gen\n      (s/and seq? (s/cat :expr ::param-expr-key :params (s/? ::params)))\n      (default-gen ::gen-param-expr)))\n\n  (s/def ::join-key-param-key (s/or :prop ::property :ident ::ident))\n\n  (s/def ::join-key-param-expr\n    (s/with-gen\n      (s/and seq? (s/cat :expr ::join-key-param-key :params (s/? ::params)))\n      (default-gen ::gen-join-key-param-expr)))\n\n  (s/def ::mutation-key (s/with-gen symbol? (default-gen ::gen-mutation-key)))\n\n  (s/def ::mutation-expr\n    (s/with-gen\n      (s/and seq? (s/cat :mutate-key ::mutation-key :params (s/? ::params)))\n      (default-gen ::gen-mutation-expr)))\n\n  (s/def ::mutation-join\n    (s/map-of ::mutation-expr ::query :count 1 :conform-keys true))\n\n  (s/def ::mutation\n    (s/or :mutation ::mutation-expr\n          :mutation-join ::mutation-join))\n\n  (s/def ::query-expr\n    (s/or :prop ::property\n          :join ::join\n          :ident ::ident\n          :mutation ::mutation\n          :param-exp ::param-expr\n          :special ::special-property))\n\n  (s/def ::query\n    (s/coll-of ::query-expr :kind vector? :gen (default-gen ::gen-query)))\n  ; end::specs[]\n\n  ;; ast specs\n\n  (s/def :edn-query-language.ast/query ::join-query)\n  (s/def :edn-query-language.ast/key (s/or :prop ::property :ident ::ident :sym symbol?))\n  (s/def :edn-query-language.ast/dispatch-key (s/or :prop ::property :sym symbol?))\n  (s/def :edn-query-language.ast/union-key ::property)\n\n  (s/def :edn-query-language.ast/children\n    (s/coll-of :edn-query-language.ast/node))\n\n  (s/def :edn-query-language.ast/root\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/children])\n      #(= :root (:type %))\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmulti node-type :type)\n\n  (defmethod node-type nil [_]\n    (s/keys :req-un [:edn-query-language.ast/key :edn-query-language.ast/dispatch-key]))\n\n  (defmethod node-type :prop [_]\n    (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key]))\n\n  (defmethod node-type :join [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key :edn-query-language.ast/query] :opt-un [:edn-query-language.ast/children])\n      #(if (-> % :query first (= :recursion)) % (if (contains? % :children) % false))\n      (fn [x] (every? (comp #(contains? #{:prop :join :union :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :union [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/query :edn-query-language.ast/children])\n      #(every? (comp #{:union-entry} :type) (:children %))))\n\n  (defmethod node-type :union-entry [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/union-key :edn-query-language.ast/query :edn-query-language.ast/children])\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :call [_]\n    (s/and (s/keys\n             :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key ::params]\n             :opt-un [:edn-query-language.ast/query :edn-query-language.ast/children])\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :root [_]\n    (s/spec :edn-query-language.ast/root))\n\n  (s/def :edn-query-language.ast/type (set (keys (methods node-type))))\n  (s/def :edn-query-language.ast/node (s/multi-spec node-type :type)))\n\n;; library\n\n(declare expr->ast)\n\n(defn- mark-meta [source target]\n  (cond-> target\n    (meta source) (assoc :meta (meta source))))\n\n(defn symbol->ast [k]\n  {:dispatch-key k\n   :key          k})\n\n(defn keyword->ast [k]\n  {:type         :prop\n   :dispatch-key k\n   :key          k})\n\n(defn union-entry->ast [[k v]]\n  (let [component (-> v meta :component)]\n    (merge\n      {:type      :union-entry\n       :union-key k\n       :query     v\n       :children  (into [] (map expr->ast) v)}\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn union->ast [m]\n  {:type     :union\n   :query    m\n   :children (into [] (map union-entry->ast) m)})\n\n(defn call->ast [[f args :as call]]\n  (if (= 'quote f)\n    (assoc (expr->ast args) :target (or (-> call meta :target) :remote))\n    (let [ast (update-in (expr->ast f) [:params] merge (or args {}))]\n      (cond-> (mark-meta call ast)\n        (symbol? (:dispatch-key ast)) (assoc :type :call)))))\n\n(defn query->ast\n  \"Convert a query to its AST representation.\"\n  [query]\n  (let [component (-> query meta :component)]\n    (merge\n      (mark-meta query\n        {:type     :root\n         :children (into [] (map expr->ast) query)})\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn query->ast1\n  \"Call query->ast and return the first children.\"\n  [query-expr]\n  (-> (query->ast query-expr) :children first))\n\n(defn join->ast [join]\n  (let [query-root? (-> join meta :query-root)\n        [k v] (first join)\n        ast         (expr->ast k)\n        type        (if (= :call (:type ast)) :call :join)\n        component   (-> v meta :component)]\n    (merge ast\n           (mark-meta join {:type type :query v})\n           (when-not (nil? component)\n             {:component component})\n           (when query-root?\n             {:query-root true})\n      (when-not (or (number? v) (= '... v) *shallow-conversion*)\n             (cond\n               (vector? v) {:children (into [] (map expr->ast) v)}\n               (map? v) {:children [(union->ast v)]}\n               :else (throw\n                       (ex-info (str \"Invalid join, \" join)\n                         {:type :error/invalid-join})))))))\n\n(defn ident->ast [[k id :as ref]]\n  {:type         :prop\n   :dispatch-key k\n   :key          ref})\n\n(defn expr->ast\n  \"Given a query expression convert it into an AST.\"\n  [x]\n  (cond\n    (symbol? x) (symbol->ast x)\n    (keyword? x) (keyword->ast x)\n    (map? x) (join->ast x)\n    (vector? x) (ident->ast x)\n    (seq? x) (call->ast x)\n    :else (throw\n            (ex-info (str \"Invalid expression \" x)\n              {:type :error/invalid-expression}))))\n\n(defn wrap-expr [root? expr]\n  (if root?\n    (with-meta\n      (cond-> expr (keyword? expr) list)\n      {:query-root true})\n    expr))\n\n(defn parameterize [expr params]\n  (if-not (empty? params)\n    (list expr params)\n    (list expr)))\n\n(defn ast->expr\n  \"Given a query expression AST convert it back into a query expression.\"\n  ([ast]\n   (ast->expr ast false))\n  ([{:keys [type component] ast-meta :meta :as ast} unparse?]\n   (if (= :root type)\n     (cond-> (into (with-meta [] ast-meta) (map #(ast->expr % unparse?)) (:children ast))\n       (not (nil? component)) (vary-meta assoc :component component))\n     (let [{:keys [key query query-root params]} ast]\n       (wrap-expr query-root\n         (if (and params (not= :call type))\n           (let [expr (ast->expr (dissoc ast :params) unparse?)]\n             (parameterize expr params))\n           (let [key (if (= :call type) (parameterize key params) key)]\n             (if (or (= :join type)\n                     (and (= :call type) (:children ast)))\n               (if (and (not= '... query) (not (number? query))\n                        (or (true? unparse?)\n                            (= :call type)))\n                 (let [{:keys [children]} ast\n                       query-meta (meta query)]\n                   (if (and (== 1 (count children))\n                            (= :union (:type (first children)))) ;; UNION\n                     (with-meta\n                       {key (into (cond-> (with-meta {} ast-meta)\n                                    component (vary-meta assoc :component component))\n                                  (map (fn [{:keys [union-key children component]}]\n                                         [union-key\n                                          (cond-> (into [] (map #(ast->expr % unparse?)) children)\n                                            (not (nil? component)) (vary-meta assoc :component component))]))\n                                  (:children (first children)))}\n                       ast-meta)\n                     (with-meta\n                       {key (cond-> (into (with-meta [] query-meta) (map #(ast->expr % unparse?)) children)\n                              (not (nil? component)) (vary-meta assoc :component component))}\n                       ast-meta)))\n                 (with-meta {key query} ast-meta))\n               key))))))))\n\n(defn ast->query [query-ast]\n  \"Given an AST convert it back into a query expression.\"\n  (ast->expr query-ast true))\n\n(defn ident?\n  \"Check if x is a EQL ident.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))\n       (= 2 (count x))))\n\n;; query processing helpers\n\n(declare focus-subquery*)\n\n(defn focus-subquery-union*\n  [query-ast sub-ast]\n  (let [s-index (into {} (map #(vector (:union-key %) %)) (:children sub-ast))]\n    (assoc query-ast\n      :children\n      (reduce\n        (fn [children {:keys [union-key] :as union-entry}]\n          (if-let [sub (get s-index union-key)]\n            (conj children (focus-subquery* union-entry sub))\n            (conj children union-entry)))\n        []\n        (:children query-ast)))))\n\n(defn focus-subquery*\n  \"Internal implementation of focus-subquery, you can use this function directly if\n  you want to send AST in and get AST out (instead of query in / query out).\"\n  [query-ast sub-ast]\n  (let [q-index (into {} (map #(vector (:key %) %)) (:children query-ast))]\n    (assoc query-ast\n      :children\n      (reduce\n        (fn [children {:keys [key type] :as focus}]\n          (if-let [source (get q-index key)]\n            (cond\n              (= :join type (:type source))\n              (conj children (focus-subquery* source focus))\n\n              (= :union type (:type source))\n              (conj children (focus-subquery-union* source focus))\n\n              :else\n              (conj children source))\n            children))\n        []\n        (:children sub-ast)))))\n\n(defn focus-subquery\n  \"Given a query, focus it along the specified query expression.\n\n  Examples:\n    (focus-query [:foo :bar :baz] [:foo])\n    => [:foo]\n\n    (fulcro.client.primitives/focus-query [{:foo [:bar :baz]} :woz] [{:foo [:bar]} :woz])\n    => [{:foo [:bar]} :woz]\"\n  [query sub-query]\n  (let [query-ast (query->ast query)\n        sub-ast   (query->ast sub-query)]\n    (ast->expr (focus-subquery* query-ast sub-ast) true)))\n\n(defn transduce-children\n  \"Recursivelly transduce children on the AST, you can use this to apply filter/transformations\n  on a whole AST. Each iteration of the transducer will get a single AST node to process.\n\n  ```\n  (->> [:a {:b [:c :d]} :e]\n       (p/query->ast)\n       (p/transduce-children (remove (comp #{:a :c} :key)))\n       (p/ast->query))\n  ; => [{:b [:d]} :e]\n  ```\"\n  [xform {:keys [children] :as node}]\n  (cond-> node\n    (seq children)\n    (update :children\n      (fn [children]\n        (into [] (comp xform (map #(transduce-children xform %))) children)))))\n\n(defn union-children?\n  \"Given an AST point, check if the children is a union query type.\"\n  [ast]\n  (= :union (some-> ast :children first :type)))\n\n(defn update-property-param\n  \"Add property param, eg:\n\n  ```\n  (p/update-property-param :keyword assoc :foo \\\"bar\\\") => (:keyword {:foo \\\"bar\\\"})\n  (p/update-property-param '(:keyword {:param \\\"prev\\\"}) assoc :foo \\\"bar\\\") => (:keyword {:foo \\\"bar\\\" :param \\\"prev\\\"})\n  ```\n  \"\n  [x f & args]\n  (if (seq? x)\n    (let [[k p] x]\n      (list k (apply f p args)))\n\n    (list x (apply f {} args))))\n\n(defn merge-asts\n  \"Merges two ast's.\"\n  [qa qb]\n  (reduce (fn [ast {:keys [key type params] :as item-b}]\n            (if-let [[idx item] (->> ast :children\n                                     (keep-indexed #(if (-> %2 :key (= key)) [%1 %2]))\n                                     first)]\n              (cond\n                (or (= :join (:type item) type)\n                    (= :prop (:type item) type))\n                (if (= (:params item) params)\n                  (update-in ast [:children idx] merge-asts item-b)\n                  (reduced nil))\n\n                (and (= :prop (:type item))\n                     (= :join type))\n                (assoc-in ast [:children idx] item-b)\n\n                (= :call type)\n                (reduced nil)\n\n                :else ast)\n              (update ast :children conj item-b)))\n    qa\n    (:children qb)))\n\n(defn merge-queries\n  \"Merges two queries\"\n  [qa qb]\n  (some-> (merge-asts (query->ast qa) (query->ast qb))\n    (ast->query)))\n\n(defn mask-query* [{:keys [children] :as source-ast} mask-ast]\n  (reduce\n    (fn [ast {mask-children :children\n              :keys         [key]\n              :as           mask-node}]\n      (if-let [source-node (->> children (filter (comp #{key} :key)) first)]\n        (if (and (seq (:children source-node)) (seq mask-children))\n          (update ast :children conj (mask-query* source-node mask-node))\n          (update ast :children conj source-node))\n        ast))\n    (assoc source-ast :children [])\n    (:children mask-ast)))\n\n(defn mask-query\n  \"Given a source EQL query, use a mask EQL query to filter which elements to pick from\n  the source. Params will be maintaned from the source, params in mask are ignored.\"\n  [source mask]\n  (let [source-ast (query->ast source)\n        mask-ast   (query->ast mask)]\n    (ast->query (mask-query* source-ast mask-ast))))\n\n(defn normalize-query-variables\n  \"Converts ident values and param values to ::p/var.\"\n  [query]\n  (->> (query->ast query)\n       (transduce-children\n         (map (fn [x]\n                (cond-> x\n                  (ident? (:key x))\n                  (assoc :key [(first (:key x)) ::var])\n\n                  (:params x)\n                  (update :params #(into {} (map (fn [[k _]] [k ::var])) %))))))\n       (ast->query)))\n\n(defn query-id\n  \"Generates a consistent hash from the query. The query first goes to a process to remove any\n  variables from idents and params, then we get the Clojure hash of it. You can use this to save\n  information about a query that can be used to correlate with the query later.\"\n  [query]\n  (hash (normalize-query-variables query)))\n\n(defn query->shallow-ast\n  \"Like query->ast, but does not follow joins.  Useful for efficiently getting just the top-level entries in\n   a large query.\"\n  [query]\n  (binding [*shallow-conversion* true]\n    (query->ast query)))\n\n(when INCLUDE_SPECS\n  (s/fdef query->ast\n    :args (s/cat :query (s/nilable ::query))\n    :ret :edn-query-language.ast/root)\n\n  (s/fdef query->ast1\n    :args (s/cat :query ::query)\n    :ret (s/nilable :edn-query-language.ast/node))\n\n  (s/fdef ast->query\n    :args (s/cat :ast :edn-query-language.ast/node)\n    :ret ::query)\n\n  (s/fdef ident?\n    :args (s/cat :x any?)\n    :ret boolean?)\n\n  (s/fdef focus-subquery\n    :args (s/cat :query ::query :sub-query ::query)\n    :ret ::query)\n\n  (s/fdef transduce-children\n    :args (s/cat :xform fn? :node :edn-query-language.ast/node)\n    :ret :edn-query-language.ast/node)\n\n  (s/fdef union-children?\n    :args (s/cat :ast :edn-query-language.ast/node)\n    :ret boolean?)\n\n  (s/fdef update-property-param\n    :args (s/cat :x (s/or :property ::property\n                          :expr ::param-expr)\n                 :f fn?\n                 :args (s/* any?))\n    :ret ::param-expr)\n\n  (s/fdef merge-asts\n    :args (s/cat :qa :edn-query-language.ast/node, :qb :edn-query-language.ast/node)\n    :ret (s/nilable :edn-query-language.ast/node))\n\n  (s/fdef merge-queries\n    :args (s/cat :qa (s/nilable ::query), :qb (s/nilable ::query))\n    :ret (s/nilable ::query)))\n"]}