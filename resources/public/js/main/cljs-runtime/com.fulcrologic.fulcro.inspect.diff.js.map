{"version":3,"sources":["com/fulcrologic/fulcro/inspect/diff.cljc"],"mappings":"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","names":["com.fulcrologic.fulcro.inspect.diff/updates","a","b","cljs.core.reduce","p__48923","vec__48924","cljs.core.nth","adds","k","v","va","cljs.core.get","cljs.core._EQ_","cljs.core/map?","cljs.core.assoc","com.fulcrologic.fulcro.inspect.diff/removals","p__48933","vec__48934","rems","temp__5733__auto__","vec__48937","_","vb","cljs.core/find","cljs.core.not_EQ_","childs","cljs.core/seq","cljs.core.conj","G__48941","com.fulcrologic.fulcro.inspect.diff/diff","com.fulcrologic.fulcro.inspect.diff/deep-merge","x","y","cljs.core.merge_with","p__48945","map__48946","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","com.fulcrologic.fulcro.inspect.diff/patch-updates","updates","p__48950","map__48951","com.fulcrologic.fulcro.inspect.diff/patch-removals","removals","final","rem","cljs.core.dissoc","vec__48962","cljs.core/first","p1__48948#","cljs.core.update","G__48965","G__48966","com.fulcrologic.fulcro.inspect.diff/patch","diff"],"sourcesContent":["(ns com.fulcrologic.fulcro.inspect.diff\n  \"Internal algorithms for sending db diffs to Inspect tool.\"\n  (:require [clojure.spec.alpha :as s]))\n\n(defn updates [a b]\n  (reduce\n    (fn [adds [k v]]\n      (let [va (get a k :fulcro.inspect.lib.diff/unset)]\n        (if (= v va)\n          adds\n          (if (and (map? v) (map? va))\n            (assoc adds k (updates va v))\n            (assoc adds k v)))))\n    {}\n    b))\n\n(defn removals [a b]\n  (reduce\n    (fn [rems [k v]]\n      (if-let [[_ vb] (find b k)]\n        (if (and (map? v) (map? vb) (not= v vb))\n          (let [childs (removals v vb)]\n            (if (seq childs)\n              (conj rems {k childs})\n              rems))\n          rems)\n        (conj rems (cond-> k (map? k) (assoc :fulcro.inspect.lib.diff/key? true)))))\n    []\n    a))\n\n(defn diff [a b]\n  {:fulcro.inspect.lib.diff/updates  (updates a b)\n   :fulcro.inspect.lib.diff/removals (removals a b)})\n\n(defn deep-merge [x y]\n  (if (and (map? x) (map? y))\n    (merge-with deep-merge x y)\n    y))\n\n(defn patch-updates [x {:fulcro.inspect.lib.diff/keys [updates]}]\n  (merge-with deep-merge x updates))\n\n(defn patch-removals [x {:fulcro.inspect.lib.diff/keys [removals]}]\n  (reduce\n    (fn [final rem]\n      (cond\n        (:fulcro.inspect.lib.diff/key? rem)\n        (dissoc final (dissoc rem :fulcro.inspect.lib.diff/key?))\n\n        (map? rem)\n        (let [[k v] (first rem)]\n          (update final k #(patch-removals % {:fulcro.inspect.lib.diff/removals v})))\n\n        :else\n        (dissoc final rem)))\n    x\n    removals))\n\n(defn patch [x diff]\n  (-> x\n      (patch-updates diff)\n      (patch-removals diff)))\n"]}