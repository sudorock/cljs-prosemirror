{"version":3,"sources":["app/client.cljs"],"mappings":"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","names":["js/app","js/app.client","js/app.client.app","app.client/app","com.fulcrologic.fulcro.application.fulcro_app","app.client/delete-todo","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__70507","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","p__70509","map__70510","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","id","list-id","state","cljs.core.swap_BANG_","cljs.core/update","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.merge/remove-ident*","options__45975__auto__","_","props","com.fulcrologic.fulcro.components/wrapped-render","map__70514","com.fulcrologic.fulcro.components/props","js/app.client.TodoItem","props__45976__auto__","this__45977__auto__","temp__5733__auto__","init-state__45978__auto__","obj70519","G__70520","G__70521","goog.object/get","obj70523","com.fulcrologic.fulcro.components/configure-component!","app.client/TodoItem","this","value","e","com.fulcrologic.fulcro.components.transact_BANG_","G__70513","map__70516","on-click","com.fulcrologic.fulcro.components.get_state","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom.macro_create_element","p1__70512#","app.client/ui-todo-item","com.fulcrologic.fulcro.components.factory","app.client/add-todo","map__70524","p__70526","map__70527","new-id","cljs.core/deref","cljs.core.get_in","com.fulcrologic.fulcro.algorithms.merge/merge-component","cljs.core/update-in","cljs.core/inc","params","com.fulcrologic.fulcro.components/make-state-map","map__70529","js/app.client.TodoList","obj70532","G__70533","G__70534","obj70536","app.client/TodoList","items","com.fulcrologic.fulcro.components.get_query","cljs.core/not-empty","cljs.core.map","app.client/ui-todo-list","map__70539","js/app.client.TodoInput","obj70544","G__70545","G__70546","obj70548","app.client/TodoInput","list","com.fulcrologic.fulcro.mutations/set-value!","G__70538","map__70541","on-change","p1__70537#","app.client/ui-todo-input","map__70549","js/app.client.Root","obj70552","G__70553","G__70554","obj70556","app.client/Root","todo-list","todo-input","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_","js/console.log","app.client/refresh"],"sourcesContent":["(ns app.client\n  (:require\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom :refer [div input p button ul li]]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.algorithms.data-targeting :as target]\n    [clojure.pprint :refer [pprint]]))\n\n(defonce app (app/fulcro-app))\n\n(defmutation delete-todo [{:keys [id list-id]}]\n  (action\n    [{:keys [state]}]\n    (swap! state update :todo-item/id dissoc id)\n    (swap! state merge/remove-ident* [:todo-item/id id] [:todo-list/id list-id :todo-list/items])))\n\n(defsc TodoItem [this {:todo-item/keys [id value list-id]}]\n  {:query          [:todo-item/id\n                    :todo-item/value\n                    :todo-item/list-id]\n   :ident          :todo-item/id\n   :initLocalState (fn [this _]\n                     {:on-click (fn [e id list-id]\n                                  (comp/transact! this [(delete-todo {:id id :list-id list-id})]))})}\n  (let [{:keys [on-click]} (comp/get-state this)]\n    (li {} value (button {:onClick #(on-click % id list-id)} \"Delete\"))))\n\n(def ui-todo-item (comp/factory TodoItem {:keyfn :todo-item/id}))\n\n(defmutation add-todo [{:keys [list-id value]}]\n  (action\n    [{:keys [state]}]\n    (let [new-id (inc (get-in @state [:todo-list/id list-id :todo-list/item-count]))]\n      (swap! state merge/merge-component TodoItem {:todo-item/id      new-id\n                                                   :todo-item/value   value\n                                                   :todo-item/list-id list-id}\n             :append [:todo-list/id list-id :todo-list/items])\n      (swap! state update-in [:todo-list/id list-id :todo-list/item-count] inc))))\n\n(defsc TodoList [this {:todo-list/keys [items]}]\n  {:query         [:todo-list/id\n                   :todo-list/item-count\n                   {:todo-list/items (comp/get-query TodoItem)}]\n   :ident         :todo-list/id\n   :initial-state {:todo-list/item-count 0\n                   :todo-list/id         :param/id\n                   :todo-list/items      []}}\n  (when (not-empty items)\n    (ul (map ui-todo-item items))))\n\n(def ui-todo-list (comp/factory TodoList))\n\n(defsc TodoInput [this {:todo-input/keys [value list]}]\n  {:query          [:todo-input/id\n                    :todo-input/value\n                    {:todo-input/list (comp/get-query TodoList)}]\n   :ident          :todo-input/id\n   :initial-state  {:todo-input/id    :param/id\n                    :todo-input/value \"\"\n                    :todo-input/list  {:id :param/list-id}}\n   :initLocalState (fn [this _]\n                     {:on-change (fn [e]\n                                   (m/set-value! this :todo-input/value (.. e -target -value)))\n                      :on-click  (fn [e list-id value]\n                                   (.preventDefault e)\n                                   (comp/transact! this [(add-todo {:list-id list-id\n                                                                    :value   value})])\n                                   (m/set-value! this :todo-input/value \"\"))})}\n  (let [{:keys [on-change on-click]} (comp/get-state this)\n        list-id (:todo-list/id list)]\n    (div (input {:type     \"text\"\n                 :value    value\n                 :onChange on-change})\n         (button {:onClick #(on-click % list-id value)} \"ADD\"))))\n\n(def ui-todo-input (comp/factory TodoInput))\n\n(defsc Root [this {:root/keys [todo-list todo-input]}]\n  {:query         [{:root/todo-list (comp/get-query TodoList)}\n                   {:root/todo-input (comp/get-query TodoInput)}]\n   :initial-state {:root/todo-input {:id 1 :list-id 1}\n                   :root/todo-list  {:id 1}}}\n  (div (ui-todo-input todo-input)\n       (ui-todo-list todo-list)))\n\n(defn ^:export init\n  \"Shadow-cljs sets this up to be our entry-point function. See shadow-cljs.edn `:init-fn` in the modules of the main build.\"\n  []\n  (app/mount! app Root \"app\")\n  (js/console.log \"Loaded\"))\n\n(defn ^:export refresh\n  \"During development, shadow-cljs will call this on every hot reload of source. See shadow-cljs.edn\"\n  []\n  ;; re-mounting will cause forced UI refresh, update internals, etc.\n  (app/mount! app Root \"app\")\n  (js/console.log \"Hot reload\"))\n\n(comment\n  (keys app)\n  (reset! (::app/state-atom app) {})\n  (-> app (::app/state-atom) deref)\n  (merge/merge-component! app TodoList {:todo-list/id         1\n                                        :todo-list/item-count 0\n                                        :todo-list/items      [{:todo-item/id    1\n                                                                :todo-item/value \"hello\"}\n                                                               {:todo-item/id    2\n                                                                :todo-item/value \"world\"}]}\n                          :replace [:root/todo-list])\n  (merge/merge-component! app TodoItem {:todo-item/id    4\n                                        :todo-item/value \"I am Sunil\"}\n                          :append [:todo-list/id 1 :todo-list/items])\n  (merge/merge-component! app TodoInput {:todo-input/id 1}\n                          :replace [:root/todo-input])\n  (::app/state-atom app)\n  (app/current-state app)\n  (comp/get-ident TodoItem {:todo-item/id 1})\n  (app/schedule-render! app)\n  (app/unmount! app Root \"app\"))\n"]}